/*
 *      Copyright 2015-2016 GetSocial B.V.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

  var ViewBuilder = require('./ViewBuilder')

  var NATIVE_BRIDGE_NAME = "GetSocialChatCordova";

  var ChatViewBuilder = function() {
    this.userId = null;
    this.providerId = null;
    this.conversationId = null;
    this.roomName = null;
  }

  ChatViewBuilder.constructWithUserId = function(userId) {
    if(userId === undefined)
        return null

    var item = new ChatViewBuilder();
    item.userId = userId;
    return item;
  }

  ChatViewBuilder.constructWithUserIdAndProviderId = function(userId, providerId) {
    if(userId === undefined)
        return null;
    if(providerId === undefined)
        return null;

    var item = new ChatViewBuilder();
    item.userId = userId;
    item.providerId = providerId;
    return item;
  }

  ChatViewBuilder.constructWithConversationId = function(conversationId) {
    if(conversationId === undefined)
        return null;

    var item = new ChatViewBuilder();
    item.conversationId = conversationId;
    return item;
  }

   ChatViewBuilder.constructWithRoomName = function(roomName) {
    if(roomName === undefined)
       return null;

    var item = new ChatViewBuilder();
    item.roomName = roomName;
    return item;
   }

    ChatViewBuilder.prototype.show = function() {
      var option = this.toJson();
      if(this.userId != null) {
        option.userId = this.userId;
      }
      if(this.providerId != null) {
        option.providerId = this.providerId;
      }
      if(this.conversationId != null) {
        option.conversationId = this.conversationId;
      }
      if(this.roomName != null) {
        option.roomName = this.roomName;
      }
      cordova.exec(null, null, NATIVE_BRIDGE_NAME, "createChatView", [option]);
    }

    ChatViewBuilder.prototype.close = function() {
      var option = {}
      cordova.exec(null, null, NATIVE_BRIDGE_NAME, "closeChatView", [option]);
    }

  ChatViewBuilder.prototype.__proto__ = ViewBuilder.prototype;

  module.exports = ChatViewBuilder;
