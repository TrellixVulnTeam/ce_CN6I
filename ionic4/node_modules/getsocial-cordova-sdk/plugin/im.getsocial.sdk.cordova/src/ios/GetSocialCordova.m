/*
 *      Copyright 2015-2016 GetSocial B.V.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

#import "GetSocialCordova.h"

@implementation GetSocialCordova

static NSMutableArray *registeredPlugins = nil;

+ (NSMutableArray *)registeredPlugins {
  if (registeredPlugins == nil) {
    registeredPlugins = [[NSMutableArray alloc] init];
  }
  return registeredPlugins;
}

static NSMutableDictionary *actionFinalizer = nil;
static int actionFinalizerCounter = 0;

+ (NSMutableDictionary *)actionFinalizer {
  if (actionFinalizer == nil) {
    actionFinalizer = [[NSMutableDictionary alloc] init];
  }
  return actionFinalizer;
}

- (void)alertCordova:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  NSString *name = [[command arguments] objectAtIndex:0];
  NSString *msg = [NSString stringWithFormat:@"Hello, %@ in Native iOS", name];

  CDVPluginResult *result =
      [CDVPluginResult resultWithStatus:CDVCommandStatus_OK
                        messageAsString:msg];
  [self.commandDelegate sendPluginResult:result callbackId:callbackId];
}

- (void)init:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  NSString *key = [[command arguments] objectAtIndex:0];

  [[GetSocial sharedInstance] initWithKey:key
      success:^{
        [self successWithCallbackId:callbackId];
        NSLog(@"GetSocial initialization successful");
      }
      failure:^(NSError *error) {
        [self errorWithMsg:@"GetSocial initialization failed"
             andCallbackId:callbackId];
        NSLog(@"GetSocial initialization failed");
      }];
}

- (void)getVersion:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  NSString *version =
      [NSString stringWithFormat:@"%d", (int)[GetSocial version]];
  [self successWithNSStringResult:version andCallbackId:callbackId];
}

- (void)getApiVersion:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  [self successWithNSStringResult:[GetSocial sharedInstance].sdkVersion
                    andCallbackId:callbackId];
}
- (void)getEnvironment:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  [self successWithNSStringResult:@"iOS" andCallbackId:callbackId];
}

//???
- (void)getConfiguration:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  [self successWithNSStringResult:@"" andCallbackId:callbackId];
}

- (void)setOnReferralDataReceivedListener:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  [[GetSocial sharedInstance]
      setOnReferralDataReceivedHandler:^(NSArray *referralData) {
        NSLog(@"Referral data received: %@.", referralData);
        [self successWithArrayResult:referralData andCallbackId:callbackId];
      }];
}

- (void)setOnInviteFriendsListener:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  [[GetSocial sharedInstance] setInviteFriendsBlock:^(
                                  GetSocialInviteFriendsStatus status,
                                  NSInteger number) {
    NSMutableDictionary *property = [[NSMutableDictionary alloc] init];
    [property setObject:[NSNumber numberWithInt:(status - 1)] forKey:@"Event"];
    if (status == GetSocialInviteFriendsStatusSent) {
      [property setObject:[NSNumber numberWithInteger:number]
                   forKey:@"InvitedFriends"];
    }

    [self successWithDictionaryResult:property andCallbackId:callbackId];
  }];
}

- (void)getSupportedInviteProviders:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  [self successWithArrayResult:[[GetSocial sharedInstance]
                                   getSupportedInviteProviders]
                 andCallbackId:callbackId];
}

- (void)registerPlugin:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];

  NSDictionary *dictionary = [[command arguments] objectAtIndex:0];
  BOOL isAvailableForDevice = [dictionary objectForKey:@"isAvailableForDevice"];
  NSString *provider = [dictionary objectForKey:@"provider"];

  GetSocialPluginProxy *getSocialPluginProxy = [[GetSocialPluginProxy alloc]
      initWithCommandDelegate:self.commandDelegate
                   callbackId:callbackId
                    available:isAvailableForDevice];

  [GetSocialCordova.registeredPlugins addObject:getSocialPluginProxy];

  [[GetSocial sharedInstance] registerPlugin:getSocialPluginProxy
                                    provider:provider];

  [getSocialPluginProxy initializeCallbackId];
}

- (void)inviteFriendsUsingProvider:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  NSDictionary *option = [[command arguments] objectAtIndex:0];
  if (option == nil)
    [self errorWithMsg:@"Wrong data" andCallbackId:callbackId];

  NSMutableDictionary *properties = [[NSMutableDictionary alloc] init];

  NSString *provider = [option objectForKey:@"provider"];
  if ([self isEmptyOrNull:provider])
    return;

  NSString *subject = [option objectForKey:@"subject"];
  if (![self isEmptyOrNull:subject])
    properties[kGetSocialSubject] = subject;

  NSString *text = [option objectForKey:@"text"];
  if (![self isEmptyOrNull:text])
    properties[kGetSocialText] = [NSString stringWithFormat:@"%@", text];

  NSString *imagePath = [option objectForKey:@"imagePath"];
  if (![self isEmptyOrNull:imagePath]) {
    // create full path
    NSString *imageFullPathString = [[[NSBundle mainBundle] bundlePath]
        stringByAppendingPathComponent:imagePath];
    NSData *imageData = [NSData dataWithContentsOfFile:imageFullPathString];
    properties[kGetSocialImage] = [UIImage imageWithData:imageData];
  }

  NSDictionary *referralsArray = [option objectForKey:@"referrals"];
  if (referralsArray != nil) {
    properties[kGetSocialReferralData] = referralsArray;
  }

  [[GetSocial sharedInstance] inviteFriendsUsingProvider:provider
                                          withProperties:properties];
  [self successWithCallbackId:callbackId];
}

- (void)createSmartInviteView:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  NSDictionary *object = [[command arguments] objectAtIndex:0];

  GetSocialSmartInviteViewBuilder *smartInvite =
      [[GetSocial sharedInstance] createSmartInviteView];

  NSString *subject = [object objectForKey:@"subject"];
  if (![self isEmptyOrNull:subject])
    smartInvite.subject = subject;

  NSString *text = [object objectForKey:@"text"];
  if (![self isEmptyOrNull:text])
    smartInvite.text = text;

  NSString *title = [object objectForKey:@"title"];
  if (![self isEmptyOrNull:title])
    smartInvite.title = title;

  NSString *imageUrlString = [object objectForKey:@"imagePath"];
  if (![self isEmptyOrNull:imageUrlString]) {
    // create full path
    NSString *imageFullUrlString = [[[NSBundle mainBundle] bundlePath]
        stringByAppendingPathComponent:imageUrlString];
    NSError *localError = nil;
    UIImage *img = [UIImage imageWithContentsOfFile:imageFullUrlString];
    if (img != nil) {
      [smartInvite setImage:img];
    } else
      NSLog(@"Could not load image. Error: %@", localError.description);
  }

  NSDictionary *referralData = [object objectForKey:@"referralData"];
  if (referralData != nil && referralData.count != 0)
    smartInvite.referralData = referralData;

  [smartInvite show];

  [self successWithCallbackId:callbackId];
}

- (void)getCurrentUser:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];

  GetSocialCurrentUser *currentUser = [[GetSocial sharedInstance] currentUser];
  NSString *serializedUser = [currentUser serialize];
  if ([serializedUser length] > 0) {
    [self successWithNSStringResult:[currentUser serialize]
                      andCallbackId:callbackId];
  } else {
    [self errorWithMsg:@"Serialize error" andCallbackId:callbackId];
  }
}

- (void)createActivitiesView:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  NSDictionary *object = [[command arguments] objectAtIndex:0];

  NSString *group = [object objectForKey:@"group"];
  NSArray *tags = [object objectForKey:@"tags"];

  GetSocialActivitiesViewBuilder *activitiesView = nil;
  if ([self isEmptyOrNull:group]) {
    activitiesView = [[GetSocial sharedInstance] createActivitiesView];
  } else {
    activitiesView =
        [[GetSocial sharedInstance] createActivitiesViewWithGroup:group
                                                          andTags:tags];
  }

  [activitiesView show];

  [self successWithCallbackId:callbackId];
}

- (void)postActivity:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  NSDictionary *object = [[command arguments] objectAtIndex:0];

  NSString *text = [object objectForKey:@"text"];

  UIImage *image = nil;
  NSString *imagePath = [object objectForKey:@"imagePath"];
  if (![self isEmptyOrNull:imagePath]) {
    // create full path
    NSString *imageFullUrlString = [[[NSBundle mainBundle] bundlePath]
        stringByAppendingPathComponent:imagePath];
    image = [UIImage imageWithContentsOfFile:imageFullUrlString];
  }

  NSString *buttonText = [object objectForKey:@"buttonText"];
  NSString *actionId = [object objectForKey:@"actionId"];
  NSArray *tags = [object objectForKey:@"tags"];

  [[GetSocial sharedInstance] postActivity:text
      withImage:image
      buttonText:buttonText
      action:actionId
      andTags:tags
      success:^{
        [self successWithCallbackId:callbackId];
      }
      failure:^(NSError *error) {
        [self errorWithMsg:[error localizedDescription]
             andCallbackId:callbackId];
      }];
}

- (void)createNotificationsView:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  NSDictionary *object = [[command arguments] objectAtIndex:0];

  GetSocialNotificationsViewBuilder *notificationViewBuilder =
      [[GetSocial sharedInstance] createNotificationsView];

  NSString *title = [object objectForKey:@"title"];
  if (![self isEmptyOrNull:title])
    notificationViewBuilder.title = title;

  [notificationViewBuilder show];
  [self successWithCallbackId:callbackId];
}

- (void)setOnUnreadNotificationsCountChangeListener:
    (CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];

  [[GetSocial sharedInstance]
      setOnNotificationsChangeHandler:^(NSInteger unreadNotificationsCount) {
        CDVPluginResult *result =
            [CDVPluginResult resultWithStatus:CDVCommandStatus_OK
                                 messageAsInt:(int)unreadNotificationsCount];
        [result setKeepCallbackAsBool:YES];
        [self.commandDelegate sendPluginResult:result callbackId:callbackId];
      }];
}

- (NSDictionary *)getReturnedUser:(NSString *)serializedUser
                        andStatus:(BOOL)isCancel {
  return @{
    @"serializedUser" : serializedUser,
    @"isCancel" : [NSNumber numberWithBool:isCancel]
  };
}

- (void)createUserListView:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  NSDictionary *object = [[command arguments] objectAtIndex:0];

  GetSocialUserListViewBuilder *userListViewBuilder =
      [[GetSocial sharedInstance] createUserListViewWithDismissHandler:^(
                                      GetSocialUser *user, BOOL didCancel) {
        if (!didCancel) {
          NSLog(@"User %@ (%@) was selected.", user.displayName, user.guid);
          [self
              successWithDictionaryResult:[self getReturnedUser:[user serialize]
                                                      andStatus:NO]
                            andCallbackId:callbackId];
        } else {
          NSLog(@"User list closed");
          [self successWithDictionaryResult:[self getReturnedUser:@""
                                                        andStatus:YES]
                              andCallbackId:callbackId];
        }
      }];

  NSString *title = [object objectForKey:@"title"];
  if (![self isEmptyOrNull:title])
    userListViewBuilder.title = title;

  [userListViewBuilder show];
}

- (void)getLeaderboard:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  NSString *leaderboardId = [[command arguments] objectAtIndex:0];

  [[GetSocial sharedInstance] leaderboard:leaderboardId
      success:^(GetSocialLeaderboard *leaderboard) {

        if (leaderboard) {
          [self successWithNSStringResult:[leaderboard serialize]
                            andCallbackId:callbackId];
        } else {
          [self errorWithMsg:@"Cannot get Leaderboard 1"
               andCallbackId:callbackId];
        }

      }
      failure:^(NSError *error) {
        [self errorWithMsg:[error localizedDescription]
             andCallbackId:callbackId];
      }];
}

- (void)getLeaderboardsArray:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  NSArray *leaderboardId = [[command arguments] objectAtIndex:0];

  [[GetSocial sharedInstance] leaderboards:leaderboardId
      success:^(NSArray *leaderboards) {
        NSMutableArray *result = [NSMutableArray array];
        for (int i = 0; i < [leaderboards count]; i++) {
          [result addObject:[[leaderboards objectAtIndex:i] serialize]];
        }
        [self successWithArrayResult:result andCallbackId:callbackId];
      }
      failure:^(NSError *error) {
        [self errorWithMsg:[error localizedDescription]
             andCallbackId:callbackId];
      }];
}

- (void)getLeaderboardsInterval:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  NSInteger start = [[[command arguments] objectAtIndex:0] integerValue];
  NSInteger end = [[[command arguments] objectAtIndex:1] integerValue];

  [[GetSocial sharedInstance] leaderboards:start
      count:end
      success:^(NSArray *leaderboards) {
        NSMutableArray *result = [NSMutableArray array];
        for (int i = 0; i < [leaderboards count]; i++) {
          [result addObject:[[leaderboards objectAtIndex:i] serialize]];
        }
        [self successWithArrayResult:result andCallbackId:callbackId];
      }
      failure:^(NSError *error) {
        [self errorWithMsg:[error localizedDescription]
             andCallbackId:callbackId];
      }];
}

- (void)getLeaderboardScores:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  NSDictionary *object = [[command arguments] objectAtIndex:0];

  NSString *leaderboardId = [object objectForKey:@"id"];
  if ([self isEmptyOrNull:leaderboardId]) {
    return [self errorWithMsg:@"Wrong leaderboard id" andCallbackId:callbackId];
  }
  NSInteger start = [[object objectForKey:@"start"] integerValue];
  NSInteger end = [[object objectForKey:@"end"] integerValue];
  NSInteger type = [[object objectForKey:@"type"] integerValue];

  GetSocialLeaderboardScoreType scoreType;
  switch (type) {
  case 1:
    scoreType = GetSocialLeaderboardScoreTypeWorld;
    break;
  case 2:
    scoreType = GetSocialLeaderboardScoreTypeFollowing;
    break;
  case 3:
    scoreType = GetSocialLeaderboardScoreTypeOthers;
    break;
  }

  [[GetSocial sharedInstance] leaderboardScores:leaderboardId
      offset:start
      count:end
      scoreType:type
      success:^(NSArray *scores) {

        if (scores.count > 0) {
          NSMutableArray *result = [NSMutableArray array];
          for (int i = 0; i < [scores count]; i++) {
            [result addObject:[[scores objectAtIndex:i] serialize]];
          }
          [self successWithArrayResult:result andCallbackId:callbackId];

        } else {
          [self errorWithMsg:@"There are no scores for leaderboard."
               andCallbackId:callbackId];
        }

      }
      failure:^(NSError *error) {
        [self errorWithMsg:[error localizedDescription]
             andCallbackId:callbackId];
      }];
}

- (void)submitLeaderboardScore:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  NSDictionary *object = [[command arguments] objectAtIndex:0];
  NSString *leaderboardId = [object objectForKey:@"id"];
  if ([self isEmptyOrNull:leaderboardId]) {
    return [self errorWithMsg:@"Wrong leaderboard id" andCallbackId:callbackId];
  }
  NSInteger value = [[object objectForKey:@"value"] integerValue];

  [[GetSocial sharedInstance] submitLeaderboardScore:value
      forLeaderboardId:leaderboardId
      success:^(NSInteger position) {
        [self successWithNumberResult:(int)position andCallbackId:callbackId];
      }
      failure:^(NSError *error) {
        [self errorWithMsg:[error localizedDescription]
             andCallbackId:callbackId];

      }];
}

- (void)cloudSaveData:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  NSString *data = [[command arguments] objectAtIndex:0];

  [[GetSocial sharedInstance] saveState:data
      success:^{
        [self successWithCallbackId:callbackId];
      }
      failure:^(NSError *error) {
        [self errorWithMsg:[error localizedDescription]
             andCallbackId:callbackId];
      }];
}

- (void)getCloudSaveData:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];

  [[GetSocial sharedInstance] savedStateWithSuccess:^(NSString *state) {
    [self successWithNSStringResult:state andCallbackId:callbackId];
  }
      failure:^(NSError *error) {
        [self errorWithMsg:[error localizedDescription]
             andCallbackId:callbackId];
      }];
}

- (void)setLanguage:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  NSString *language = [[command arguments] objectAtIndex:0];

  [[GetSocial sharedInstance] setLanguage:language];

  [self successWithCallbackId:callbackId];
}

- (void)getLanguage:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];

  [self successWithNSStringResult:[GetSocial sharedInstance].language
                    andCallbackId:callbackId];
}

- (void)setOnUserAvatarClickHandler:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  [[GetSocial sharedInstance]
      setOnUserAvatarClickHandler:^BOOL(GetSocialUser *user,
                                        GetSocialSourceView source) {
        NSDictionary *response = @{
          @"user" : [user serialize],
          @"source" : [NSNumber numberWithInt:source]
        };

        CDVPluginResult *result =
            [CDVPluginResult resultWithStatus:CDVCommandStatus_OK
                          messageAsDictionary:response];
        [result setKeepCallbackAsBool:YES];
        [self.commandDelegate sendPluginResult:result callbackId:callbackId];

        return YES;
      }];
}

- (void)setOnAppAvatarClickHandler:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
    [[GetSocial sharedInstance] setOnAppAvatarClickHandler:^BOOL {
      CDVPluginResult *result =
          [CDVPluginResult resultWithStatus:CDVCommandStatus_OK];
      [result setKeepCallbackAsBool:YES];
      [self.commandDelegate sendPluginResult:result callbackId:callbackId];
      return YES;
    }];
}

- (void)setOnActivityActionClickListener:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
    [[GetSocial sharedInstance]
        setOnActivityActionClickHandler:^(NSString *action) {
          CDVPluginResult *result =
              [CDVPluginResult resultWithStatus:CDVCommandStatus_OK
                                messageAsString:action];
          [result setKeepCallbackAsBool:YES];
          [self.commandDelegate sendPluginResult:result callbackId:callbackId];
        }];
}

- (void)setOnInviteButtonClickListener:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
    [[GetSocial sharedInstance] setOnInviteButtonClickHandler:^BOOL {
      CDVPluginResult *result =
          [CDVPluginResult resultWithStatus:CDVCommandStatus_OK];
      [result setKeepCallbackAsBool:YES];
      [self.commandDelegate sendPluginResult:result callbackId:callbackId];

      return YES;
    }];
}

- (void)setOnActionPerformListener:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];

  [[GetSocial sharedInstance] setOnActionPerformHandler:^(
                                  GetSocialAction action,
                                  void (^finalize)(BOOL shouldPerformAction)) {
    [[GetSocialCordova actionFinalizer]
        setObject:finalize
           forKey:[NSString stringWithFormat:@"%d", actionFinalizerCounter]];

    NSDictionary *response = @{
      @"action" : [self actionString:action],
      @"actionFinalizerHash" : [NSNumber numberWithInt:actionFinalizerCounter]
    };

    actionFinalizerCounter += 1;

    CDVPluginResult *result =
        [CDVPluginResult resultWithStatus:CDVCommandStatus_OK
                      messageAsDictionary:response];
    [result setKeepCallbackAsBool:YES];
    [self.commandDelegate sendPluginResult:result callbackId:callbackId];
  }];
}

- (void)finalizeAction:(CDVInvokedUrlCommand *)command {
  NSString *callbackId = [command callbackId];
  int actionFinalizerHash = [[[command arguments] objectAtIndex:0] intValue];
  BOOL value = [[[command arguments] objectAtIndex:1] boolValue];

  void (^finalizer)(BOOL) = [[GetSocialCordova actionFinalizer]
      objectForKey:[NSString stringWithFormat:@"%d", actionFinalizerHash]];
  if (finalizer != nil) {
    finalizer(value);
    [self successWithCallbackId:callbackId];
    [[GetSocialCordova actionFinalizer]
        removeObjectForKey:[NSString
                               stringWithFormat:@"%d", actionFinalizerHash]];
  } else {
    [self errorWithMsg:@"Not found ActionFinalizer" andCallbackId:callbackId];
  }
}

- (NSString *)actionString:(GetSocialAction)action {
  switch (action) {
  case GetSocialActionOpenActivities:
    return @"Open Activities";
    break;
  case GetSocialActionOpenActivityDetails:
    return @"Open Activity";
    break;
  case GetSocialActionPostActivity:
    return @"Post Activity";
    break;
  case GetSocialActionPostComment:
    return @"Post Comment";
    break;
  case GetSocialActionLikeActivity:
    return @"Like Activity";
    break;
  case GetSocialActionLikeComment:
    return @"Like Comment";
    break;
  case GetSocialActionOpenFriendsList:
    return @"Open Friends List";
    break;
  case GetSocialActionOpenSmartInvites:
    return @"Open Smart Invites";
    break;
  case GetSocialActionOpenNotifications:
    return @"Open Notifications";
    break;
  case GetSocialActionOpenChatList:
    return @"Open Chat List";
    break;
  case GetSocialActionOpenPrivateChat:
    return @"Open Private Chat";
    break;
  case GetSocialActionOpenPublicChat:
    return @"Open Public Chat";
    break;
  case GetSocialActionSendPrivateChatMessage:
    return @"Send Private Chat Message";
    break;
  case GetSocialActionSendPublicChatMessage:
    return @"Send Public Chat Message";
    break;
  default:
    return @"";
    break;
  }
}

- (BOOL)isEmptyOrNull:(NSString *)data {
  if (data == nil || data.length == 0) {
    return true;
  }

  return false;
}

@end
